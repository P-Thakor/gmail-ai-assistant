// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  
  // App-specific fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  emails        Email[]
  generatedReplies GeneratedReply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-specific models
model Email {
  id          String   @id @default(cuid())
  userId      String
  gmailId     String   @unique // Gmail message ID
  threadId    String   // Gmail thread ID
  subject     String
  from        String
  to          String
  body        String   @db.Text
  snippet     String?  // Gmail snippet
  isRead      Boolean  @default(false)
  isImportant Boolean  @default(false)
  receivedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  generatedReplies GeneratedReply[]
  
  @@index([userId, receivedAt])
  @@index([gmailId])
}

model GeneratedReply {
  id            String      @id @default(cuid())
  userId        String
  emailId       String
  replyType     ReplyType   // POSITIVE, NEGATIVE, CUSTOM
  originalPrompt String?    // User's custom instruction if any
  generatedText String      @db.Text
  finalText     String?     @db.Text // After user edits
  status        ReplyStatus @default(DRAFT)
  sentAt        DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  email Email @relation(fields: [emailId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@index([emailId])
}

enum ReplyType {
  POSITIVE
  NEGATIVE
  CUSTOM
}

enum ReplyStatus {
  DRAFT
  EDITED
  SENT
  FAILED
}